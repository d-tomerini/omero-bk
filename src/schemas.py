# -*- coding: utf-8 -*-
import json
from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel, Field, validator


class Message(BaseModel):
    """Basic response"""
    message: str


class StoreInfo(BaseModel):
    """
    Basic info about a store.
    :param name: name of the store, how it is identified in calls
    :param label: how it is called for the outside world
    :param local: if it is a file, where it is
    :param online: if it is a database, how to reach it
    """
    name: str
    label: str
    local: Optional[str]
    online: Optional[str]

    class Config:
        orm_mode = True


class SearchRows(BaseModel):
    store: StoreInfo
    count: int
    items: List


class ReturnedSchema(BaseModel):
    store: StoreInfo
    database_schema: List


class BiancaLocalStore(BaseModel):
    """
    Model for the store
    Fields are just generic info as test database
    """
    id: Optional[int]
    ProjectName: str
    ExperimentalSystem: str
    TherapeuticArea: str
    Disease: str
    DataType: str
    OperatorName: str
    Samples: str
    BatchID: str
    BatchStart: datetime
    BatchEnd: datetime
    InstrumentType: str
    MetadataFileName: str
    RawFileName: str
    S3BucketName: str
    RawFileURI: str
    ArnRawFile: str

    class Config:
        orm_mode = True


class MetadataFieldsOut(BaseModel):
    """
    Database containing the fields required/optional to upload.
    At the moment it is a bit experimental, deserves thinking more
    about the model structure.
    """
    field_name: str
    required: bool = False
    autogenerated: bool = False
    searchable: str = 'freetext'
    search_list: list = []
    content_type: str = 'text'
    centree_name: str = None
    centree_ontology: str = None

    class Config:
        orm_mode = True

    @validator('search_list', pre=True)
    def convert_str(cls, v):
        """ Converts list representation to list"""
        if isinstance(v, str):
            v = v.replace("'", '"')
            v_list = json.loads(v)
            return v_list
        return v


class MetadataFieldsIn(BaseModel):
    field_name: str
    required: bool = False
    autogenerated: bool = False
    searchable: str = 'freetext'
    content_type: str = 'text'
    centree_name: str = None
    centree_ontology: str = None
    store: str
    search_list: str

    @validator('search_list', pre=True)
    def convert_str(cls, v):
        if isinstance(v, list):
            v = json.dumps(v)
        # here there are some issues
        # database elsewhere requires " and ' to be double escaped
        # but apparently here it is not needed
        # v = v.replace("'", "''").replace('"', '""')
        return v
